import asyncio

from aiogram.utils.keyboard import InlineKeyboardBuilder as BD
from aiogram.types import InlineKeyboardButton as IB

from databases.database import Database
from wordbank.wordlist import WORDS_TASKS, BACK_LEXICON


async def tasks_list():
    set_tasks = BD()

    db = Database()

    await db.connect()
    tasks_dict = await db.task_list()

    for task_id in tasks_dict:
        words = []
        t = tasks_dict[task_id]
        price = f'üî•${await db.give_price(task_id)}—Ä$ '

        # –≠—Ç—É —á–∞—Å—Ç—å —Å—Ç–æ–∏—Ç —É–±—Ä–∞—Ç—å, –æ–Ω–∞ —Å—á–∏—Ç–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
        posts = await db.give_posts(task_id)
        if posts == 1:
            posts = f' –Ω–∞ –ø–æ—Å—Ç'
        elif 1 < posts < 5:
            posts = f' –Ω–∞ {posts} –ø–æ—Å—Ç–∞'
        elif posts >= 5:
            posts = f' –Ω–∞ {posts} –ø–æ—Å—Ç–æ–≤'


        if '–ª–∞–π–∫' in t:
            if t.count('–ª–∞–π–∫') == 1:
                words.append('–õ–∞–π–∫')
            elif 1 < t.count('–ª–∞–π–∫') < 5:
                words.append(f'{t.count("–ª–∞–π–∫")} –ª–∞–π–∫–∞')
            elif t.count('–ª–∞–π–∫') >= 5:
                words.append(f'{t.count("–ª–∞–π–∫")} –ª–∞–π–∫–æ–≤')

        if '—Ä–µ—Ç–≤–∏—Ç' in t:
            if t.count('—Ä–µ—Ç–≤–∏—Ç') == 1:
                if '–ª–∞–π–∫' not in t:
                    words.append('–†–µ—Ç–≤–∏—Ç')
                else:
                    words.append('—Ä–µ—Ç–≤–∏—Ç')
            elif 2 < t.count('—Ä–µ—Ç–≤–∏—Ç') < 5:
                words.append(f'{t.count("—Ä–µ—Ç–≤–∏—Ç")} —Ä–µ—Ç–≤–∏—Ç–∞')
            elif t.count('—Ä–µ—Ç–≤–∏—Ç') >= 5:
                words.append(f'{t.count("–ª–∞–π–∫")} —Ä–µ—Ç–≤–∏—Ç–æ–≤')

        if '–∫–æ–º–º–µ–Ω—Ç' in t:
            if t.count('–∫–æ–º–º–µ–Ω—Ç') == 1:
                if '—Ä–µ—Ç–≤–∏—Ç' not in t and '–ª–∞–π–∫' not in t:
                    words.append('–ö–æ–º–º–µ–Ω—Ç')
                else:
                    words.append('–∫–æ–º–º–µ–Ω—Ç')
            elif 2 < t.count('–∫–æ–º–º–µ–Ω—Ç') < 5:
                words.append(f'{t.count("–∫–æ–º–º–µ–Ω—Ç")} –∫–æ–º–º–µ–Ω—Ç–∞')
            elif t.count('–∫–æ–º–º–µ–Ω—Ç') >= 5:
                words.append(f'{t.count("–ª–∞–π–∫")} –∫–æ–º–º–µ–Ω—Ç–æ–≤')

        set_tasks.row(
            IB(text=price + ', '.join(words) + posts, callback_data=f'task_{task_id}'),
            width=1
        )

    set_tasks.row(
        IB(text=BACK_LEXICON, callback_data='back_to_main_menu')
    )
    await db.disconnect()
    return set_tasks.as_markup()



